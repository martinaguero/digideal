/*
 * generated by Xtext 2.13.0
 */
package org.trimatek.digideal.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.trimatek.digideal.contract.AllFacts
import org.trimatek.digideal.contract.AnyFact
import org.trimatek.digideal.contract.Contract
import org.trimatek.digideal.contract.Facts
import org.trimatek.digideal.contract.FactsLevel
import org.trimatek.digideal.contract.PayTo
import org.trimatek.digideal.contract.PaymentCondition
import org.trimatek.digideal.contract.SupervisedBy

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ContractGenerator extends AbstractGenerator {

	override void doGenerate(Resource res, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (c : res.allContents.toIterable.filter(Contract)) {
//			fsa.generateFile("contract/" + c.cid.toFirstUpper + ".properties", c.compile)
			fsa.generateFile(c.cid.toFirstUpper + ".properties", c.compile)
		}
	}

	def compile(Contract cnt) {
		'''
id = «cnt.cid»
«FOR sentence : cnt.paragraph»
	«IF sentence instanceof PayTo»
		«(sentence as PayTo).compile»
	«ENDIF»
	«IF sentence instanceof SupervisedBy»
		«(sentence as SupervisedBy).compile»
	«ENDIF»
	«IF sentence instanceof PaymentCondition»
		«(sentence as PaymentCondition).compile»
	«ENDIF»
   «ENDFOR»
		'''
	}

	def compile(PayTo payTo) {
		'''	 
payer.name = «payTo.payer.name»
payer.email = «payTo.payer.email.replace('"','')»
payer.address = «payTo.payer.address.replace('"','')»
collector.name = «payTo.collector.name»
collector.email = «payTo.collector.email.replace('"','')»
collector.address = «payTo.collector.address.replace('"','')»
btc = «payTo.btc»
quantity = «payTo.quantity»
  '''
	}

	def compile(SupervisedBy supBy) {
		''' 
agent.name = «supBy.agent.name»
agent.email = «supBy.agent.email.replace('"','')»
agent.address = «supBy.agent.address.replace('"','')»
  '''
	}
	
	def compile(PaymentCondition payCond) {
		''' 
payment.condition = «payCond.description»
«payCond.level.compile»
«payCond.facts.compile»
  '''
	}
	
	def compile(FactsLevel factsLevel) {	 
		 factsLevel.options.typeToString			 
	}
	
	def dispatch typeToString(AnyFact anyFact) {
		"facts.level = ANY"		
	}
	
	def dispatch typeToString(AllFacts allFacts) {
		"facts.level = ALL"
	}

	def compile(Facts facts) {	 
		''' 	
facts = «facts.fact»
 		''' 			 
	}

}
