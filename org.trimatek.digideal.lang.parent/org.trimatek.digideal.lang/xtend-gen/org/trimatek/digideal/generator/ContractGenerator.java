/**
 * generated by Xtext 2.13.0
 */
package org.trimatek.digideal.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.trimatek.digideal.contract.AllFacts;
import org.trimatek.digideal.contract.AnyFact;
import org.trimatek.digideal.contract.Contract;
import org.trimatek.digideal.contract.Facts;
import org.trimatek.digideal.contract.FactsLevel;
import org.trimatek.digideal.contract.PayTo;
import org.trimatek.digideal.contract.PaymentCondition;
import org.trimatek.digideal.contract.Sentence;
import org.trimatek.digideal.contract.SupervisedBy;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ContractGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource res, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Contract> _filter = Iterables.<Contract>filter(IteratorExtensions.<EObject>toIterable(res.getAllContents()), Contract.class);
    for (final Contract c : _filter) {
      String _firstUpper = StringExtensions.toFirstUpper(c.getCid());
      String _plus = (_firstUpper + ".properties");
      fsa.generateFile(_plus, this.compile(c));
    }
  }
  
  public CharSequence compile(final Contract cnt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("id = ");
    String _cid = cnt.getCid();
    _builder.append(_cid);
    _builder.newLineIfNotEmpty();
    {
      EList<Sentence> _paragraph = cnt.getParagraph();
      for(final Sentence sentence : _paragraph) {
        {
          if ((sentence instanceof PayTo)) {
            CharSequence _compile = this.compile(((PayTo) sentence));
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((sentence instanceof SupervisedBy)) {
            CharSequence _compile_1 = this.compile(((SupervisedBy) sentence));
            _builder.append(_compile_1);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((sentence instanceof PaymentCondition)) {
            CharSequence _compile_2 = this.compile(((PaymentCondition) sentence));
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final PayTo payTo) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("payer.name = ");
    String _name = payTo.getPayer().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("payer.email = ");
    String _replace = payTo.getPayer().getEmail().replace("\"", "");
    _builder.append(_replace);
    _builder.newLineIfNotEmpty();
    _builder.append("payer.address = ");
    String _replace_1 = payTo.getPayer().getAddress().replace("\"", "");
    _builder.append(_replace_1);
    _builder.newLineIfNotEmpty();
    _builder.append("collector.name = ");
    String _name_1 = payTo.getCollector().getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    _builder.append("collector.email = ");
    String _replace_2 = payTo.getCollector().getEmail().replace("\"", "");
    _builder.append(_replace_2);
    _builder.newLineIfNotEmpty();
    _builder.append("collector.address = ");
    String _replace_3 = payTo.getCollector().getAddress().replace("\"", "");
    _builder.append(_replace_3);
    _builder.newLineIfNotEmpty();
    _builder.append("sts = ");
    int _sts = payTo.getSts();
    _builder.append(_sts);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final SupervisedBy supBy) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("agent.name = ");
    String _name = supBy.getAgent().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("agent.email = ");
    String _replace = supBy.getAgent().getEmail().replace("\"", "");
    _builder.append(_replace);
    _builder.newLineIfNotEmpty();
    _builder.append("agent.address = ");
    String _replace_1 = supBy.getAgent().getAddress().replace("\"", "");
    _builder.append(_replace_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final PaymentCondition payCond) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("payment.condition = ");
    String _description = payCond.getDescription();
    _builder.append(_description);
    _builder.newLineIfNotEmpty();
    String _compile = this.compile(payCond.getLevel());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    CharSequence _compile_1 = this.compile(payCond.getFacts());
    _builder.append(_compile_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String compile(final FactsLevel factsLevel) {
    return this.typeToString(factsLevel.getOptions());
  }
  
  protected String _typeToString(final AnyFact anyFact) {
    return "facts.level = ANY";
  }
  
  protected String _typeToString(final AllFacts allFacts) {
    return "facts.level = ALL";
  }
  
  public CharSequence compile(final Facts facts) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("facts = ");
    EList<String> _fact = facts.getFact();
    _builder.append(_fact);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String typeToString(final EObject allFacts) {
    if (allFacts instanceof AllFacts) {
      return _typeToString((AllFacts)allFacts);
    } else if (allFacts instanceof AnyFact) {
      return _typeToString((AnyFact)allFacts);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(allFacts).toString());
    }
  }
}
