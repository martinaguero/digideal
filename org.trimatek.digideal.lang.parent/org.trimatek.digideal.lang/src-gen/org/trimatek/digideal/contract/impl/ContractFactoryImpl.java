/**
 * generated by Xtext 2.13.0
 */
package org.trimatek.digideal.contract.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.trimatek.digideal.contract.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ContractFactoryImpl extends EFactoryImpl implements ContractFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ContractFactory init()
  {
    try
    {
      ContractFactory theContractFactory = (ContractFactory)EPackage.Registry.INSTANCE.getEFactory(ContractPackage.eNS_URI);
      if (theContractFactory != null)
      {
        return theContractFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ContractFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContractFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ContractPackage.CONTRACT: return createContract();
      case ContractPackage.SENTENCE: return createSentence();
      case ContractPackage.SUBJECT: return createSubject();
      case ContractPackage.REFERENCE: return createReference();
      case ContractPackage.PAY_TO: return createPayTo();
      case ContractPackage.PAYMENT_CONDITION: return createPaymentCondition();
      case ContractPackage.FACTS_LEVEL: return createFactsLevel();
      case ContractPackage.ANY_FACT: return createAnyFact();
      case ContractPackage.ALL_FACTS: return createAllFacts();
      case ContractPackage.FACTS: return createFacts();
      case ContractPackage.SUPERVISED_BY: return createSupervisedBy();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sentence createSentence()
  {
    SentenceImpl sentence = new SentenceImpl();
    return sentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subject createSubject()
  {
    SubjectImpl subject = new SubjectImpl();
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PayTo createPayTo()
  {
    PayToImpl payTo = new PayToImpl();
    return payTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PaymentCondition createPaymentCondition()
  {
    PaymentConditionImpl paymentCondition = new PaymentConditionImpl();
    return paymentCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FactsLevel createFactsLevel()
  {
    FactsLevelImpl factsLevel = new FactsLevelImpl();
    return factsLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnyFact createAnyFact()
  {
    AnyFactImpl anyFact = new AnyFactImpl();
    return anyFact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AllFacts createAllFacts()
  {
    AllFactsImpl allFacts = new AllFactsImpl();
    return allFacts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Facts createFacts()
  {
    FactsImpl facts = new FactsImpl();
    return facts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SupervisedBy createSupervisedBy()
  {
    SupervisedByImpl supervisedBy = new SupervisedByImpl();
    return supervisedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContractPackage getContractPackage()
  {
    return (ContractPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ContractPackage getPackage()
  {
    return ContractPackage.eINSTANCE;
  }

} //ContractFactoryImpl
